{"ast":null,"code":"import axios from 'axios';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\nimport store from '../store';\nimport authSlice from '../store/slices/Auth';\nconst axiosService = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosService.interceptors.request.use(async config => {\n  const {\n    token\n  } = store.getState().auth;\n\n  if (token !== null) {\n    config.headers.Authorization = 'Bearer ' + token; // @ts-ignore\n\n    console.debug('[Request]', config.baseURL + config.url, JSON.stringify(token));\n  }\n\n  return config;\n});\naxiosService.interceptors.response.use(res => {\n  // @ts-ignore\n  console.debug('[Response]', res.config.baseURL + res.config.url, res.status, res.data);\n  return Promise.resolve(res);\n}, err => {\n  console.debug('[Response]', err.config.baseURL + err.config.url, err.response.status, err.response.data);\n  return Promise.reject(err);\n}); // @ts-ignore\n\nconst refreshAuthLogic = async failedRequest => {\n  const {\n    refreshToken\n  } = store.getState().auth;\n\n  if (refreshToken !== null) {\n    return axios.post('/auth/refresh/', {\n      refresh: refreshToken\n    }, {\n      baseURL: process.env.REACT_APP_API_URL\n    }).then(resp => {\n      const {\n        access,\n        refresh\n      } = resp.data;\n      failedRequest.response.config.headers.Authorization = 'Bearer ' + access;\n      store.dispatch(authSlice.actions.setAuthTokens({\n        token: access,\n        refreshToken: refresh\n      }));\n    }).catch(err => {\n      if (err.response && err.response.status === 401) {\n        store.dispatch(authSlice.actions.setLogout());\n      }\n    });\n  }\n};\n\ncreateAuthRefreshInterceptor(axiosService, refreshAuthLogic);\nexport function fetcher(url) {\n  return axiosService.get < T > url.then(res => res.data);\n}\nexport default axiosService;","map":{"version":3,"sources":["/Users/aleksandrawerda/Desktop/fiszki-dla-niemych-5/react/src/assets/utils/Axios.js"],"names":["axios","createAuthRefreshInterceptor","store","authSlice","axiosService","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","getState","auth","Authorization","console","debug","url","JSON","stringify","response","res","status","data","Promise","resolve","err","reject","refreshAuthLogic","failedRequest","refreshToken","post","refresh","then","resp","access","dispatch","actions","setAuthTokens","catch","setLogout","fetcher","get","T"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\nimport store from '../store';\nimport authSlice from '../store/slices/Auth';\n\nconst axiosService = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\naxiosService.interceptors.request.use(async (config) => {\n    const { token } = store.getState().auth;\n\n    if (token !== null) {\n        config.headers.Authorization = 'Bearer ' + token;\n        // @ts-ignore\n        console.debug('[Request]', config.baseURL + config.url, JSON.stringify(token));\n    }\n    return config;\n});\n\naxiosService.interceptors.response.use(\n    (res) => {\n        // @ts-ignore\n        console.debug('[Response]', res.config.baseURL + res.config.url, res.status, res.data);\n        return Promise.resolve(res);\n    },\n    (err) => {\n        console.debug(\n            '[Response]',\n            err.config.baseURL + err.config.url,\n            err.response.status,\n            err.response.data\n        );\n        return Promise.reject(err);\n    }\n);\n\n// @ts-ignore\nconst refreshAuthLogic = async (failedRequest) => {\n    const { refreshToken } = store.getState().auth;\n    if (refreshToken !== null) {\n        return axios\n            .post(\n                '/auth/refresh/',\n                {\n                    refresh: refreshToken,\n                },\n                {\n                    baseURL: process.env.REACT_APP_API_URL\n                }\n            )\n            .then((resp) => {\n                const { access, refresh } = resp.data;\n                failedRequest.response.config.headers.Authorization = 'Bearer ' + access;\n                store.dispatch(\n                    authSlice.actions.setAuthTokens({ token: access, refreshToken: refresh })\n                );\n            })\n            .catch((err) => {\n                if (err.response && err.response.status === 401) {\n                    store.dispatch(authSlice.actions.setLogout());\n                }\n            });\n    }\n};\n\ncreateAuthRefreshInterceptor(axiosService, refreshAuthLogic);\n\nexport function fetcher<T = any>(url: string) {\n    return axiosService.get<T>(url).then((res) => res.data);\n}\n\nexport default axiosService;"]},"metadata":{},"sourceType":"module"}